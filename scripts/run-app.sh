#!/bin/bash

# Script para executar a aplica√ß√£o Mottooth na VM Azure
# Autor: Equipe Mottooth
# Data: 2025

# Vari√°veis da aplica√ß√£o
APP_NAME="mottooth-java"
IMAGE_NAME="mottooth-java:1.0"
CONTAINER_NAME="mottooth-app"
APP_PORT=8080
REPO_URL="https://github.com/fmelods/mottooth-java.git"
BRANCH="lolo"

echo "============================================"
echo "      EXECUTANDO APLICA√á√ÉO MOTTOOTH        "
echo "============================================"

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o est√° instalado!"
    echo "Execute primeiro o script docker-install.sh"
    exit 1
fi

# Verificar se Git est√° instalado
if ! command -v git &> /dev/null; then
    echo "üîÑ Instalando Git..."
    sudo apt update
    sudo apt install git -y
fi

# Clonar ou atualizar o reposit√≥rio
if [ -d "$APP_NAME" ]; then
    echo "üîÑ Atualizando reposit√≥rio existente..."
    cd $APP_NAME
    git pull origin $BRANCH
else
    echo "üîÑ Clonando reposit√≥rio da branch $BRANCH..."
    git clone -b $BRANCH $REPO_URL
    cd $APP_NAME
fi

if [ $? -eq 0 ]; then
    echo "‚úÖ C√≥digo fonte obtido com sucesso!"
else
    echo "‚ùå Erro ao obter c√≥digo fonte"
    exit 1
fi

# Verificar se Dockerfile existe
if [ ! -f "Dockerfile" ]; then
    echo "‚ùå Dockerfile n√£o encontrado!"
    exit 1
fi

# Parar container se estiver rodando
if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
    echo "üîÑ Parando container existente..."
    docker stop $CONTAINER_NAME
    docker rm $CONTAINER_NAME
fi

# Construir a imagem Docker
echo "üîÑ Construindo imagem Docker..."
docker build -t $IMAGE_NAME .

if [ $? -eq 0 ]; then
    echo "‚úÖ Imagem constru√≠da com sucesso!"
else
    echo "‚ùå Erro ao construir imagem"
    exit 1
fi

# Executar o container
echo "üîÑ Iniciando container da aplica√ß√£o..."
docker run -d \
  --name $CONTAINER_NAME \
  -p $APP_PORT:$APP_PORT \
  --restart unless-stopped \
  $IMAGE_NAME

if [ $? -eq 0 ]; then
    echo "‚úÖ Container iniciado com sucesso!"
else
    echo "‚ùå Erro ao iniciar container"
    exit 1
fi

# Aguardar alguns segundos para a aplica√ß√£o inicializar
echo "üîÑ Aguardando inicializa√ß√£o da aplica√ß√£o..."
sleep 15

# Verificar se o container est√° rodando
if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
    echo "‚úÖ Container est√° executando!"
else
    echo "‚ùå Container n√£o est√° executando!"
    echo "Logs do container:"
    docker logs $CONTAINER_NAME
    exit 1
fi

# Obter IP p√∫blico da VM
PUBLIC_IP=$(curl -s ifconfig.me)

echo ""
echo "============================================"
echo "        APLICA√á√ÉO EXECUTANDO COM SUCESSO!  "
echo "============================================"
echo "Container: $CONTAINER_NAME"
echo "Imagem: $IMAGE_NAME"
echo "Porta: $APP_PORT"
echo "IP P√∫blico: $PUBLIC_IP"
echo ""
echo "URLs de acesso:"
echo "üåê Aplica√ß√£o: http://$PUBLIC_IP:$APP_PORT"
echo "üìö Swagger UI: http://$PUBLIC_IP:$APP_PORT/swagger-ui.html"
echo "üóÑÔ∏è  H2 Console: http://$PUBLIC_IP:$APP_PORT/h2-console"
echo ""
echo "Comandos √∫teis:"
echo "- Ver logs: docker logs $CONTAINER_NAME"
echo "- Parar app: docker stop $CONTAINER_NAME"
echo "- Iniciar app: docker start $CONTAINER_NAME"
echo "- Status: docker ps"
echo "============================================"

# Mostrar logs finais
echo ""
echo "üìã √öltimas linhas do log da aplica√ß√£o:"
docker logs --tail 10 $CONTAINER_NAME